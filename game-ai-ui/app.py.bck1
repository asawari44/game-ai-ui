from flask import Flask, render_template, request, make_response, jsonify, Response
from flask_socketio import SocketIO
from fileOps import readFile, writeFile, runFile, createUserEnv
from env_ops import create_env, remove_env, is_env_running, get_env_list, remove_env_in_bulk, get_vnc_port, get_host_ssh_port
from subprocess import Popen
from agent_ops import is_agent_running, start_agent, stop_agent
from time import sleep
from log_reader import LogReader
from threading import Thread
from get_last_log import get_last_log

from flask import Flask, url_for, render_template, request, redirect, session
from flask_sqlalchemy import SQLAlchemy
from instagram import getfollowedby, getname


app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///test.db'
db = SQLAlchemy(app)

class User(db.Model):
        """ Create user table"""
        id = db.Column(db.Integer, primary_key=True)
        username = db.Column(db.String(80), unique=True)
        password = db.Column(db.String(80))

        def __init__(self, username, password):
                self.username = username
                self.password = password

socketio = SocketIO(app)
#log_thread = Thread()


@app.route('/', methods=['GET', 'POST'])
def home():
        """ Session control"""
        if not session.get('logged_in'):
                print(request.json)
                return render_template('index.html')
        else:
                if request.method == 'POST':
                        print(request.json)
                        username = getname(request.form['username'])
                        return render_template('index.html', data=getfollowedby(username))
                return render_template('index.html')


@app.route('/login', methods=['GET', 'POST'])
def login():
        """Login Form"""
        if request.method == 'GET':
                return render_template('login.html')
        else:
                name = request.form['username']
                passw = request.form['password']
                try:
                        data = User.query.filter_by(username=name, password=passw).first()
                        if data is not None:
                                print "################################Logging in################"
                                session['logged_in'] = True
                                return redirect(url_for('home'))
                        else:
                                return 'Dont Login'
                except:
                        return "Dont Login"

@app.route('/register/', methods=['GET', 'POST'])
def register():
        """Register Form"""
        if request.method == 'POST':
                new_user = User(username=request.form['username'], password=request.form['password'])
                db.session.add(new_user)
                db.session.commit()
                return render_template('login.html')
        return render_template('register.html')

@app.route("/logout")
def logout():
        """Logout Form"""
        session['logged_in'] = False
        return redirect(url_for('home'))


@app.route('/nocontainer')
def nocontainer():
    return render_template('nocontainer.html')

@app.route('/admin')
def admin():
    return render_template('admin.html')

@app.route('/get_env_list', methods=['POST'])
def env_list():
    env_list = get_env_list()
    return jsonify(env_list)

@app.route('/remove_envs', methods=['POST'])
def remove_envs():
    envs = request.json['data']
    remove_env_in_bulk(envs)
    return render_template('admin.html')

@app.route('/playArea', methods=["POST"])
def playarea():
    user = request.form['user']
    vnc_port = get_vnc_port(user)
    ssh_port = get_host_ssh_port(user)
    createUserEnv(user)
    resp = make_response(render_template('playArea.html'))
    resp.set_cookie('userID', user)
    resp.set_cookie('vnc_port', vnc_port)
    resp.set_cookie('ssh_port', ssh_port)
    return resp

@app.route('/getFile', methods=["POST"])
def getFile():
    user = request.cookies['userID']
    return readFile(user)

@app.route('/saveFile', methods=["POST"])
def saveFile():
    user = request.cookies['userID']
    writeFile(user, request.form['data'])
    return 'True'

@app.route('/run', methods=["POST"])
def run():
    projectname=request.form['projectname']
    print(projectname)
    try:
        user = request.cookies['userID']
    except:
        return False

    try:
        pid = request.cookies['PID']
    except:
        pid = None

    #if is_agent_running(pid): stop_agent(pid)
    if is_env_running(user):
        remove_env(user)
        sleep(2)

    vnc_port, info_channel ,ssh_port= create_env(user, projectname=projectname)
    sleep(2)
    #pid = start_agent(user, vnc_port, info_channel)

    resp = make_response(render_template('playArea.html'))
    resp.set_cookie('vnc_port', str(vnc_port))
    resp.set_cookie('ssh_port', str(ssh_port))
    resp.set_cookie('info_channel', str(info_channel))
    resp.set_cookie('PID', str(pid))

    return resp

@app.route('/getLog', methods=["POST"])
def getLog():
    user = request.cookies['userID']
    loglines = get_last_log(user)
    return loglines

@socketio.on('connect', namespace='/getlogs')
def connect():
    #global log_thread
    log_thread = Thread()
    user = request.cookies['userID']
    print "Client connected"
    if not log_thread.isAlive():
        log_thread = LogReader(socketio, user)
        log_thread.start()

@socketio.on('disconnect', namespace='/getlogs')
def disconnect():
    """
        Operations after client disconnect.
    """
    #TODO: detect if client is closed
    print('Client disconnected')

if __name__ == '__main__':
    db.create_all()
    socketio.secret_key = "123"
    socketio.run(app, host='0.0.0.0',debug=True)

